[gd_scene load_steps=20 format=2]

[ext_resource path="res://Art/heart.svg" type="Texture" id=1]
[ext_resource path="res://Art/LightCircle.png" type="Texture" id=2]
[ext_resource path="res://Art/Cat_02.png" type="Texture" id=3]
[ext_resource path="res://Art/Circle.png" type="Texture" id=4]
[ext_resource path="res://Misc/Font.tres" type="DynamicFont" id=5]
[ext_resource path="res://Scenes/ArtController.gd" type="Script" id=6]
[ext_resource path="res://Art/heart.png" type="Texture" id=7]
[ext_resource path="res://Scenes/AnimPlayer.gd" type="Script" id=8]
[ext_resource path="res://explosion08.png" type="Texture" id=9]

[sub_resource type="Curve" id=8]
min_value = -360.0
max_value = 360.0
_data = [ Vector2( 0, 149.1 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="Curve" id=6]
_data = [ Vector2( 0.019656, 0 ), 0.0, 6.29169, 0, 0, Vector2( 1, 0 ), -1.41826, 0.0, 0, 0 ]

[sub_resource type="Gradient" id=7]
interpolation_mode = 2
offsets = PoolRealArray( 0.0445682, 0.116992, 0.518106, 0.933148 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 0.631373, 0, 1, 0.286275, 0.286275, 0.286275, 1, 0.0431373, 0.0431373, 0.0431373, 0 )

[sub_resource type="CanvasItemMaterial" id=1]
light_mode = 2

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(1);
uniform float line_thickness : hint_range(0, 20) = 0.0;
uniform bool add_margins = true;

void vertex() {
    if (add_margins) {
        VERTEX += (UV * 2.0 - 1.0) * line_thickness;
    }
}

void fragment() {
    vec2 uv = UV;
    
    if (add_margins) {
        vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(line_thickness * 2.0));
        
        uv = (uv - texture_pixel_size * line_thickness) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
        
        if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
            COLOR.a = 0.0;
        } else {
            COLOR = texture(TEXTURE, uv);
        }
    } else {
        COLOR = texture(TEXTURE, uv);
    }
    
    vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
    
    if (line_thickness < 0.1) {
        vec4 color = texture(TEXTURE, uv);
        COLOR = color;
    } else {
        float outline = texture(TEXTURE, uv + vec2(-size.x, 0)).a;
        outline += texture(TEXTURE, uv + vec2(0, size.y)).a;
        outline += texture(TEXTURE, uv + vec2(size.x, 0)).a;
        outline += texture(TEXTURE, uv + vec2(0, -size.y)).a;
        outline += texture(TEXTURE, uv + vec2(-size.x * 0.866, size.y * 0.5)).a;
        outline += texture(TEXTURE, uv + vec2(-size.x * 0.5, size.y * 0.866)).a;
        outline += texture(TEXTURE, uv + vec2(size.x * 0.866, size.y * 0.5)).a;
        outline += texture(TEXTURE, uv + vec2(size.x * 0.5, size.y * 0.866)).a;
        outline += texture(TEXTURE, uv + vec2(-size.x * 0.866, -size.y * 0.5)).a;
        outline += texture(TEXTURE, uv + vec2(-size.x * 0.5, -size.y * 0.866)).a;
        outline += texture(TEXTURE, uv + vec2(size.x * 0.866, -size.y * 0.5)).a;
        outline += texture(TEXTURE, uv + vec2(size.x * 0.5, -size.y * 0.866)).a;
        outline = min(outline, 1.0);
        
        vec4 color = texture(TEXTURE, uv);
        COLOR = mix(color, line_color, outline - color.a);
    }
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/line_color = Color( 1, 1, 1, 1 )
shader_param/line_thickness = 20.0
shader_param/add_margins = true

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(1);
uniform float line_thickness : hint_range(0, 20) = 0.0;
uniform bool add_margins = true;

void vertex() {
    if (add_margins) {
        VERTEX += (UV * 2.0 - 1.0) * line_thickness;
    }
}

void fragment() {
    vec2 uv = UV;
    
    if (add_margins) {
        vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(line_thickness * 2.0));
        
        uv = (uv - texture_pixel_size * line_thickness) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
        
        if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
            COLOR.a = 0.0;
        } else {
            COLOR = texture(TEXTURE, uv);
        }
    } else {
        COLOR = texture(TEXTURE, uv);
    }
    
    vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
    
    if (line_thickness < 0.1) {
        vec4 color = texture(TEXTURE, uv);
        COLOR = color;
    } else {
        float outline = texture(TEXTURE, uv + vec2(-size.x, 0)).a;
        outline += texture(TEXTURE, uv + vec2(0, size.y)).a;
        outline += texture(TEXTURE, uv + vec2(size.x, 0)).a;
        outline += texture(TEXTURE, uv + vec2(0, -size.y)).a;
        outline += texture(TEXTURE, uv + vec2(-size.x * 0.866, size.y * 0.5)).a;
        outline += texture(TEXTURE, uv + vec2(-size.x * 0.5, size.y * 0.866)).a;
        outline += texture(TEXTURE, uv + vec2(size.x * 0.866, size.y * 0.5)).a;
        outline += texture(TEXTURE, uv + vec2(size.x * 0.5, size.y * 0.866)).a;
        outline += texture(TEXTURE, uv + vec2(-size.x * 0.866, -size.y * 0.5)).a;
        outline += texture(TEXTURE, uv + vec2(-size.x * 0.5, -size.y * 0.866)).a;
        outline += texture(TEXTURE, uv + vec2(size.x * 0.866, -size.y * 0.5)).a;
        outline += texture(TEXTURE, uv + vec2(size.x * 0.5, -size.y * 0.866)).a;
        outline = min(outline, 1.0);
        
        vec4 color = texture(TEXTURE, uv);
        COLOR = mix(color, line_color, outline - color.a);
    }
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/line_color = Color( 1, 1, 1, 1 )
shader_param/line_thickness = 0.0
shader_param/add_margins = true

[sub_resource type="Animation" id=9]
resource_name = "Die"
step = 0.01
tracks/0/type = "value"
tracks/0/path = NodePath("CPUParticles2D2:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.02, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ false, true, false ]
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:scale:x")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1.8, -0.25, 0, 0.25, 0, 1e-05, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.25, 0.51 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath(".:scale:y")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0, 1.7, -0.25, 0, 0.25, 0, 1e-05, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 0.25, 0.51 )
}
tracks/3/type = "method"
tracks/3/path = NodePath("AnimationPlayer")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0.07 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "explode"
} ]
}

[sub_resource type="Animation" id=10]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("CPUParticles2D2:emitting")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:scale")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ) ]
}
tracks/2/type = "bezier"
tracks/2/path = NodePath(".:scale:x")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/3/type = "bezier"
tracks/3/path = NodePath(".:scale:y")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}

[node name="Node2D" type="Node2D"]
script = ExtResource( 6 )

[node name="CPUParticles2D2" type="CPUParticles2D" parent="."]
rotation = 3.14159
scale = Vector2( 1, -1 )
z_index = 2
emitting = false
amount = 32
explosiveness = 1.0
lifetime_randomness = 0.3
local_coords = false
texture = ExtResource( 9 )
direction = Vector2( 0, -1 )
spread = 90.0
gravity = Vector2( 0, -150 )
initial_velocity = 100.0
initial_velocity_random = 1.0
angular_velocity_random = 1.0
angular_velocity_curve = SubResource( 8 )
linear_accel = 10.0
scale_amount = 0.2
scale_amount_random = 0.05
scale_amount_curve = SubResource( 6 )
color_ramp = SubResource( 7 )
hue_variation_random = 1.0

[node name="Light2D" type="Light2D" parent="."]
position = Vector2( 9.09495e-13, -2 )
scale = Vector2( 0.0546875, 0.0546875 )
texture = ExtResource( 2 )
mode = 2
range_z_min = 0
range_z_max = 0

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 1 )
position = Vector2( 2, -4 )
scale = Vector2( 0.0555556, 0.0555556 )
texture = ExtResource( 3 )

[node name="Circle" type="Sprite" parent="."]
material = SubResource( 3 )
position = Vector2( 3.63798e-12, -2 )
scale = Vector2( 0.0546875, 0.0546875 )
z_index = -1
texture = ExtResource( 4 )

[node name="Heart" type="Sprite" parent="."]
modulate = Color( 1, 0, 0, 1 )
material = SubResource( 5 )
position = Vector2( -18, -32 )
scale = Vector2( 0.12, 0.12 )

[node name="SuitHearts" type="Sprite" parent="."]
position = Vector2( -20.27, -32.39 )
scale = Vector2( 0.13, 0.13 )
texture = ExtResource( 1 )

[node name="Control" type="Control" parent="."]
margin_left = -35.27
margin_top = -44.39
margin_right = -5.27
margin_bottom = -19.39

[node name="HpTxt" type="Label" parent="Control"]
unique_name_in_owner = true
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 6.0
margin_top = 5.0
margin_right = 67.0
margin_bottom = 54.0
rect_scale = Vector2( 0.2, 0.2 )
custom_fonts/font = ExtResource( 5 )
text = "10"
align = 1
valign = 1

[node name="Node2D" type="Node2D" parent="."]
scale = Vector2( -1, 1 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="Node2D"]
position = Vector2( 25, 0 )
z_index = 2
emitting = false
local_coords = false
texture = ExtResource( 7 )
spread = 19.4
gravity = Vector2( 0, 0 )
initial_velocity = 100.0
damping = 100.0
scale_amount = 0.05
scale_amount_random = 0.05
scale_amount_curve = SubResource( 6 )
color = Color( 1, 0, 0, 1 )
color_ramp = SubResource( 7 )
hue_variation = -0.06
hue_variation_random = 1.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Die = SubResource( 9 )
anims/RESET = SubResource( 10 )
script = ExtResource( 8 )
